// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: proto/handler.proto

package handler

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	healthz "go_grpc/model/proto/healthz"
	transaction "go_grpc/model/proto/transaction"
	user "go_grpc/model/proto/user"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool           `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *emptypb.Empty `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_handler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_handler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_handler_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetData() *emptypb.Empty {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_handler_proto protoreflect.FileDescriptor

var file_proto_handler_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x1a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x32, 0x84, 0x02, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x7a, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x47, 0x72, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x58, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15, 0x5a, 0x13, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_handler_proto_rawDescOnce sync.Once
	file_proto_handler_proto_rawDescData = file_proto_handler_proto_rawDesc
)

func file_proto_handler_proto_rawDescGZIP() []byte {
	file_proto_handler_proto_rawDescOnce.Do(func() {
		file_proto_handler_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_handler_proto_rawDescData)
	})
	return file_proto_handler_proto_rawDescData
}

var file_proto_handler_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_handler_proto_goTypes = []interface{}{
	(*Response)(nil),                        // 0: handler.Response
	(*emptypb.Empty)(nil),                   // 1: google.protobuf.Empty
	(*healthz.HealthCheckRequest)(nil),      // 2: healthz.HealthCheckRequest
	(*user.GreetingRequest)(nil),            // 3: user.GreetingRequest
	(*transaction.TransactionRequest)(nil),  // 4: transaction.TransactionRequest
	(*healthz.HealthCheckResponse)(nil),     // 5: healthz.HealthCheckResponse
	(*user.GreetingResponse)(nil),           // 6: user.GreetingResponse
	(*transaction.TransactionResponse)(nil), // 7: transaction.TransactionResponse
}
var file_proto_handler_proto_depIdxs = []int32{
	1, // 0: handler.Response.Data:type_name -> google.protobuf.Empty
	2, // 1: handler.HandlerService.Healthz:input_type -> healthz.HealthCheckRequest
	3, // 2: handler.HandlerService.GreetUser:input_type -> user.GreetingRequest
	4, // 3: handler.HandlerService.ApproveTransactions:input_type -> transaction.TransactionRequest
	5, // 4: handler.HandlerService.Healthz:output_type -> healthz.HealthCheckResponse
	6, // 5: handler.HandlerService.GreetUser:output_type -> user.GreetingResponse
	7, // 6: handler.HandlerService.ApproveTransactions:output_type -> transaction.TransactionResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_handler_proto_init() }
func file_proto_handler_proto_init() {
	if File_proto_handler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_handler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_handler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_handler_proto_goTypes,
		DependencyIndexes: file_proto_handler_proto_depIdxs,
		MessageInfos:      file_proto_handler_proto_msgTypes,
	}.Build()
	File_proto_handler_proto = out.File
	file_proto_handler_proto_rawDesc = nil
	file_proto_handler_proto_goTypes = nil
	file_proto_handler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HandlerServiceClient is the client API for HandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HandlerServiceClient interface {
	Healthz(ctx context.Context, in *healthz.HealthCheckRequest, opts ...grpc.CallOption) (*healthz.HealthCheckResponse, error)
	GreetUser(ctx context.Context, in *user.GreetingRequest, opts ...grpc.CallOption) (*user.GreetingResponse, error)
	ApproveTransactions(ctx context.Context, in *transaction.TransactionRequest, opts ...grpc.CallOption) (*transaction.TransactionResponse, error)
}

type handlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerServiceClient(cc grpc.ClientConnInterface) HandlerServiceClient {
	return &handlerServiceClient{cc}
}

func (c *handlerServiceClient) Healthz(ctx context.Context, in *healthz.HealthCheckRequest, opts ...grpc.CallOption) (*healthz.HealthCheckResponse, error) {
	out := new(healthz.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/handler.HandlerService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) GreetUser(ctx context.Context, in *user.GreetingRequest, opts ...grpc.CallOption) (*user.GreetingResponse, error) {
	out := new(user.GreetingResponse)
	err := c.cc.Invoke(ctx, "/handler.HandlerService/GreetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) ApproveTransactions(ctx context.Context, in *transaction.TransactionRequest, opts ...grpc.CallOption) (*transaction.TransactionResponse, error) {
	out := new(transaction.TransactionResponse)
	err := c.cc.Invoke(ctx, "/handler.HandlerService/ApproveTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerServiceServer is the server API for HandlerService service.
type HandlerServiceServer interface {
	Healthz(context.Context, *healthz.HealthCheckRequest) (*healthz.HealthCheckResponse, error)
	GreetUser(context.Context, *user.GreetingRequest) (*user.GreetingResponse, error)
	ApproveTransactions(context.Context, *transaction.TransactionRequest) (*transaction.TransactionResponse, error)
}

// UnimplementedHandlerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHandlerServiceServer struct {
}

func (*UnimplementedHandlerServiceServer) Healthz(context.Context, *healthz.HealthCheckRequest) (*healthz.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (*UnimplementedHandlerServiceServer) GreetUser(context.Context, *user.GreetingRequest) (*user.GreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetUser not implemented")
}
func (*UnimplementedHandlerServiceServer) ApproveTransactions(context.Context, *transaction.TransactionRequest) (*transaction.TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransactions not implemented")
}

func RegisterHandlerServiceServer(s *grpc.Server, srv HandlerServiceServer) {
	s.RegisterService(&_HandlerService_serviceDesc, srv)
}

func _HandlerService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(healthz.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.HandlerService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).Healthz(ctx, req.(*healthz.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_GreetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.GreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).GreetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.HandlerService/GreetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).GreetUser(ctx, req.(*user.GreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_ApproveTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).ApproveTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.HandlerService/ApproveTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).ApproveTransactions(ctx, req.(*transaction.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.HandlerService",
	HandlerType: (*HandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _HandlerService_Healthz_Handler,
		},
		{
			MethodName: "GreetUser",
			Handler:    _HandlerService_GreetUser_Handler,
		},
		{
			MethodName: "ApproveTransactions",
			Handler:    _HandlerService_ApproveTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/handler.proto",
}
